import{_ as e,o as a,c as o,R as t}from"./chunks/framework.M9wuz1B2.js";const _=JSON.parse('{"title":"项目结构","description":"","frontmatter":{},"headers":[],"relativePath":"work/struct.md","filePath":"work/struct.md"}'),s={name:"work/struct.md"},c=t('<h1 id="项目结构" tabindex="-1">项目结构 <a class="header-anchor" href="#项目结构" aria-label="Permalink to &quot;项目结构&quot;">​</a></h1><p>本篇将解析项目目录、分区介绍，以便分工，但不包含node_modules讲解。</p><h2 id="apps-editor-网页端" tabindex="-1">apps/editor（网页端） <a class="header-anchor" href="#apps-editor-网页端" aria-label="Permalink to &quot;apps/editor（网页端）&quot;">​</a></h2><p>低代码平台的主要页面，包含编辑器、预览页，以及之后要做的首页、登录页、仓库等。</p><p><code>public</code>存放<code>umd.js</code>模块，<code>src</code>是源代码文件夹，其余详见<a href="/low-code-docs/work/editor.html">编辑器</a></p><h2 id="apps-server-模拟数据服务器" tabindex="-1">apps/server（模拟数据服务器） <a class="header-anchor" href="#apps-server-模拟数据服务器" aria-label="Permalink to &quot;apps/server（模拟数据服务器）&quot;">​</a></h2><p>使用vite-plugin-mock模拟服务器API，请求其中定义的API，返回一些数据，检验是否符合预期，以便在部署前发现问题。</p><h2 id="packages-shared-共享库" tabindex="-1">packages/shared（共享库） <a class="header-anchor" href="#packages-shared-共享库" aria-label="Permalink to &quot;packages/shared（共享库）&quot;">​</a></h2><p>shared/src/project和shared/src/material的<code>.ts</code>文件定义了以下接口：<code>IMaterial</code>、<code>IElement</code>、<code>IPage</code>、<code>IProject</code>，对应为物料、元素、页面、项目。除了物料之外，其对应的类实现为<code>PageElement</code>（避免与HTML的<code>Element</code>重复）、<code>Page</code>、<code>Project</code>，顾名思义。</p><p>项目的基本思路就是用物料作为模板，生成对应元素，元素组成页面，页面组成项目。</p><p>简单理解，物料其实就是编辑器左边那些能点的东西（里面定义了物料的属性要有什么），元素是可拖拽区域里的一个个组件（图片、文字等等），每个页面包含若干元素，一个项目由至少一个页面组成。</p><p>比如，我在此创建一个项目，含有两个页面，第一个页面含有一个元素，其结构为：</p><p><img src="https://s2.loli.net/2022/08/14/4Stq2vEwzlmXjFU.png" alt="控制台输出当前项目"></p><p>因为物料只有接口，自然没有对应的类和实例。</p><h2 id="packages-编辑器" tabindex="-1">packages/*（编辑器） <a class="header-anchor" href="#packages-编辑器" aria-label="Permalink to &quot;packages/*（编辑器）&quot;">​</a></h2><p>除去shared之外，其他文件夹均为模块包（每个文件夹下均有一个package.json），使用<code>vite build</code>编译打包模块。其打包结果为一个<code>*.*.umd.js</code>格式的文件，即我们要分发给编辑器负责人员使用的模块。 要对模块进行打包，则在相应目录下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>pnpm run build</span></span></code></pre></div><p>模块将在dist文件夹下生成。</p>',18),r=[c];function d(p,i,l,n,h,u){return a(),o("div",null,r)}const k=e(s,[["render",d]]);export{_ as __pageData,k as default};
